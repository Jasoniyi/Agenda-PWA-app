{"version":3,"sources":["components/Event.jsx","components/Notification.jsx","components/WeatherForecast.jsx","components/App.js","registerServiceWorker.js","index.js"],"names":["Event","_this","this","react_default","a","createElement","Fragment","className","props","time","mdbreact_esm","color","onClick","onDelete","id","title","location","icon","description","Component","Notification","state","in","componentDidUpdate","prevProps","updateComponent","notification","role","aria-label","setState","setTiemoutHandler","setTimeout","react_transition_group","mountOnEnter","unmountOnExit","timeout","classNames","exitActive","WeatherForecast","md","length","xs","fixed","App","modal","events","addEvent","newEvent","Object","toConsumableArray","push","handleInputChange","inputName","value","nextValue","defineProperty","handleDelete","eventId","filter","e","toggleModal","_this2","window","addEventListener","_this3","_this$state","src_components_Notification","map","event","components_Event","key","xl","rounded","components_WeatherForecast","isOpen","toggle","titleClass","name","label","hint","group","type","getValue","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","components_App","document","getElementById","URL","process","origin","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"0SA0CeA,mLAtCJ,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uCACXL,KAAKM,MAAMC,MAEdN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BACbJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,MAAM,SACNJ,UAAU,6BACVK,QAAS,kBAAMX,EAAKO,MAAMK,SAASZ,EAAKO,MAAMM,MAHhD,UAOAX,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBAAyBL,KAAKM,MAAMO,MAAlD,KAA+D,IAC/DZ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,iBACbL,KAAKM,MAAMQ,UAEVb,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,qBACXJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASO,KAAK,wBACbf,KAAKM,MAAMQ,aAMrBd,KAAKM,MAAMU,aACVf,EAAAC,EAAAC,cAAA,KAAGE,UAAU,oDACVL,KAAKM,MAAMU,qBA/BJC,qBC8DLC,oNA3DbC,MAAQ,CACNF,UAAW,KACXG,IAAI,KAGNC,mBAAqB,SAAAC,GACnB,IAAIC,EACIC,EAAiBzB,EAAKO,MAAtBkB,aAER,GAAIA,IAAiBF,EAAUE,aAAc,CAC3C,OAAQA,GACN,IAAK,SACHD,EACEtB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUC,MAAM,WACdR,EAAAC,EAAAC,cAAA,QAAMsB,KAAM,MAAOC,aAAW,UADhC,uBAIF,MAEF,IAAK,UACHH,EACEtB,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUC,MAAM,UACdR,EAAAC,EAAAC,cAAA,QAAMsB,KAAK,MAAMC,aAAW,UAD9B,iBASN3B,EAAK4B,SAAS,CAAEV,UAAWM,EAAiBH,IAAI,GAAQ,kBACtDrB,EAAK6B,0BAKXA,kBAAoB,WAClBC,WAAW,WACT9B,EAAK4B,SAAS,CAAEP,IAAI,KACnB,8EAGI,IACCH,EAAcjB,KAAKmB,MAAnBF,UAER,OAAOA,EACLhB,EAAAC,EAAAC,cAAC2B,EAAA,cAAD,CACEV,GAAIpB,KAAKmB,MAAMC,GACfW,cAAY,EACZC,eAAa,EACbC,QAAS,IACTC,WAAY,CAAEC,WAAY,SAEzBlB,GAED,YAxDmBA,cC8BZmB,EAhCS,SAAA9B,GACtB,OACEL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQ6B,GAAG,KACTpC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uBAAd,YACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAd,8CAC8C,IAC5CJ,EAAAC,EAAAC,cAAA,SAAIG,EAAMgC,OAAV,YAFF,WAIArC,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QACZJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQ+B,GAAG,IAAIlC,UAAU,eACvBJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASO,KAAK,MAAMyB,OAAK,KAE3BvC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQ+B,GAAG,KAAX,UAEFtC,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQ+B,GAAG,IAAIlC,UAAU,eACvBJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAASO,KAAK,6BAA6ByB,OAAK,KAElDvC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQ+B,GAAG,KAAX,aAGJtC,EAAAC,EAAAC,cAAA,sJCwKOsC,6MA/KbtB,MAAQ,CACNK,aAAc,GACdkB,OAAO,EACPC,OAAQ,CACN,CACE/B,GAAI,EACJL,KAAM,QACNM,MAAO,uBACPC,SAAU,sBAEZ,CACEF,GAAI,EACJL,KAAM,QACNM,MAAO,oCACPC,SAAU,uBAEZ,CAAEF,GAAI,EAAGL,KAAM,QAASM,MAAO,iBAC/B,CACED,GAAI,EACJL,KAAM,QACNM,MAAO,qBACPC,SAAU,UACVE,YACE,mKAeR4B,SAAW,WACT,IAAIC,EAAQC,OAAAC,EAAA,EAAAD,CAAO/C,EAAKoB,MAAMwB,QAC9BE,EAASG,KAAK,CACZpC,GAAIiC,EAASP,OAASO,EAASA,EAASP,OAAS,GAAG1B,GAAK,EAAI,EAC7DL,KAAMR,EAAKoB,MAAMZ,KACjBM,MAAOd,EAAKoB,MAAMN,MAClBC,SAAUf,EAAKoB,MAAML,SACrBE,YAAajB,EAAKoB,MAAMH,cAE1BjB,EAAK4B,SAAS,CACZgB,OAAQE,IAEV9C,EAAK4B,SAAS,CACZpB,KAAM,GACNM,MAAO,GACPC,SAAU,GACVE,YAAa,QAIjBiC,kBAAoB,SAAAC,GAAS,OAAI,SAAAC,GAC/B,IAAMC,EAAYD,EAClBpD,EAAK4B,SAALmB,OAAAO,EAAA,EAAAP,CAAA,GACGI,EAAYE,QAIjBE,aAAe,SAAAC,GACb,IAAMZ,EAAS5C,EAAKoB,MAAMwB,OAAOa,OAAO,SAAAC,GAAC,OAAIA,EAAE7C,KAAO2C,IACtDxD,EAAK4B,SAAS,CACZgB,cAIJe,YAAc,WACZ3D,EAAK4B,SAAS,CACZe,OAAQ3C,EAAKoB,MAAMuB,4FA9CH,IAAAiB,EAAA3D,KAClB4D,OAAOC,iBAAiB,SAAU,WAChCF,EAAKhC,SAAS,CAAEH,aAAc,aAGhCoC,OAAOC,iBAAiB,UAAW,WACjCF,EAAKhC,SAAS,CAAEH,aAAc,+CA4CzB,IAAAsC,EAAA9D,KAAA+D,EACiC/D,KAAKmB,MAArCwB,EADDoB,EACCpB,OAAenB,GADhBuC,EACSrB,MADTqB,EACgBvC,cACvB,OACEvB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAC6D,EAAD,CAAcxC,aAAcA,IAC5BvB,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQ6B,GAAG,IAAIhC,UAAU,QACvBJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uBAAd,UACAJ,EAAAC,EAAAC,cAAA,OAAKS,GAAG,UACLZ,KAAKmB,MAAMwB,OAAOsB,IAAI,SAAAC,GAAK,OAC1BjE,EAAAC,EAAAC,cAACgE,EAAD,CACEC,IAAKF,EAAMtD,GACXA,GAAIsD,EAAMtD,GACVL,KAAM2D,EAAM3D,KACZM,MAAOqD,EAAMrD,MACbC,SAAUoD,EAAMpD,SAChBE,YAAakD,EAAMlD,YACnBL,SAAUmD,EAAKR,kBAIrBrD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQH,UAAU,QAChBJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQ6D,GAAG,IAAIhC,GAAG,IAAIhC,UAAU,uBAC9BJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,MAAM,OAAO6D,SAAO,EAAC5D,QAASV,KAAK0D,aAA3C,gBAMNzD,EAAAC,EAAAC,cAACoE,EAAD,CAAiBjC,OAAQK,EAAOL,WAIpCrC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUgE,OAAQxE,KAAKmB,MAAMuB,MAAO+B,OAAQzE,KAAK0D,aAC/CzD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEH,UAAU,cACVqE,WAAW,yBACXD,OAAQzE,KAAK0D,aAHf,iBAOAzD,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBACdJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEmE,KAAK,OACLC,MAAM,OACN7D,KAAK,QACL8D,KAAK,QACLC,OAAK,EACLC,KAAK,OACLC,SAAUhF,KAAKiD,kBAAkB,UAEnChD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEmE,KAAK,QACLC,MAAM,QACN7D,KAAK,OACL8D,KAAK,WACLC,OAAK,EACLC,KAAK,OACLC,SAAUhF,KAAKiD,kBAAkB,WAEnChD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEmE,KAAK,WACLC,MAAM,sBACN7D,KAAK,MACL+D,OAAK,EACLC,KAAK,OACLC,SAAUhF,KAAKiD,kBAAkB,cAEnChD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEmE,KAAK,cACLC,MAAM,yBACN7D,KAAK,cACL+D,OAAK,EACLC,KAAK,WACLC,SAAUhF,KAAKiD,kBAAkB,mBAIvChD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAgBH,UAAU,0BACxBJ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,MAAM,OACNC,QAAS,WACPoD,EAAKJ,cACLI,EAAKlB,aAJT,iBAhKM3B,aCRZgE,EAAcC,QACW,cAA7BtB,OAAO9C,SAASqE,UAEe,UAA7BvB,OAAO9C,SAASqE,UAEhBvB,OAAO9C,SAASqE,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1E,QACfoE,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC5DjEC,IAASC,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,MAASC,SAASC,eAAe,SDUlC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB/C,OAAO9C,UAC3C8F,SAAWhD,OAAO9C,SAAS8F,OAIvC,OAGFhD,OAAOC,iBAAiB,OAAQ,WAC9B,IAAMyB,EAAK,GAAAuB,OAAMF,GAAN,sBAEN1B,EAwCX,SAAiCK,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7B9B,OAAO9C,SAASwG,aAKpBjC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEAzDAqB,CAAwBjC,GAHxBD,EAAgBC,MCxBxBkC","file":"static/js/main.8d56b717.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { MDBBadge, MDBIcon } from \"mdbreact\";\r\n\r\nclass Event extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"media mt-1\">\r\n          <h3 className=\"h3-responsive font-weight-bold mr-3\">\r\n            {this.props.time}\r\n          </h3>\r\n          <div className=\"media-body mb-3 mb-lg-3\">\r\n            <MDBBadge\r\n              color=\"danger\"\r\n              className=\"ml-2 float-right click-del\"\r\n              onClick={() => this.props.onDelete(this.props.id)}\r\n            >\r\n              Delete\r\n            </MDBBadge>\r\n            <h6 className=\"mt-0 font-weight-bold\">{this.props.title} </h6>{\" \"}\r\n            <hr className=\"hr-bold my-2\" />\r\n            {this.props.location && (\r\n              // it means IF this.props.location THEN dsplay wats in d bracket\r\n              <React.Fragment>\r\n                <p className=\"font-smaller mb-0\">\r\n                  <MDBIcon icon=\"location-arrow mr-2\" />\r\n                  {this.props.location}\r\n                </p>\r\n              </React.Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {this.props.description && (\r\n          <p className=\"p-2 mb-4 blue-grey lighten-5 blue-grey lighten-5\">\r\n            {this.props.description}\r\n          </p>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;\r\n","import React, { Component } from \"react\";\r\nimport { MDBAlert } from \"mdbreact\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./Notification.css\";\r\n\r\nclass Notification extends Component {\r\n  state = {\r\n    Component: null,\r\n    in: false\r\n  };\r\n\r\n  componentDidUpdate = prevProps => {\r\n    let updateComponent;\r\n    const { notification } = this.props;\r\n\r\n    if (notification !== prevProps.notification) {\r\n      switch (notification) {\r\n        case \"online\":\r\n          updateComponent = (\r\n            <MDBAlert color=\"success\">\r\n              <span role={\"img\"} aria-label=\"emoji\"></span> Online mode again.\r\n            </MDBAlert>\r\n          );\r\n          break;\r\n\r\n        case \"offline\":\r\n          updateComponent = (\r\n            <MDBAlert color=\"danger\">\r\n              <span role=\"img\" aria-label=\"emoji\"></span> Offline mode\r\n            </MDBAlert>\r\n          );\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      this.setState({ Component: updateComponent, in: true }, () =>\r\n        this.setTiemoutHandler()\r\n      );\r\n    }\r\n  };\r\n\r\n  setTiemoutHandler = () => {\r\n    setTimeout(() => {\r\n      this.setState({ in: false });\r\n    }, 3000);\r\n  };\r\n\r\n  render() {\r\n    const { Component } = this.state;\r\n\r\n    return Component ? (\r\n      <CSSTransition\r\n        in={this.state.in}\r\n        mountOnEnter\r\n        unmountOnExit\r\n        timeout={500}\r\n        classNames={{ exitActive: \"fade\" }}\r\n      >\r\n        {Component}\r\n      </CSSTransition>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport { MDBIcon, MDBRow, MDBCol } from \"mdbreact\";\r\n\r\nconst WeatherForecast = props => {\r\n  return (\r\n    <>\r\n      <MDBCol md=\"3\">\r\n        <h3 className=\"text-uppercase my-3\">Schedule</h3>\r\n        <h6 className=\"my-3\">\r\n          It is going to be busy that Today. You Have{\" \"}\r\n          <b>{props.length} events </b> today.\r\n        </h6>\r\n        <h1 className=\"my-3\">\r\n          <MDBRow>\r\n            <MDBCol xs=\"3\" className=\"text-center\">\r\n              <MDBIcon icon=\"sun\" fixed />\r\n            </MDBCol>\r\n            <MDBCol xs=\"9\">Sunny</MDBCol>\r\n          </MDBRow>\r\n          <MDBRow>\r\n            <MDBCol xs=\"3\" className=\"text-center\">\r\n              <MDBIcon icon=\"thermometer-three-quarters\" fixed />\r\n            </MDBCol>\r\n            <MDBCol xs=\"9\">23°C</MDBCol>\r\n          </MDBRow>\r\n        </h1>\r\n        <p>\r\n          Don't forget your sunglasses. Today will dry and sunny, becoming warm\r\n          in the afternoon with temperatures of between 20 and 25 degrees.\r\n        </p>\r\n      </MDBCol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherForecast;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  MDBBtn,\r\n  MDBInput,\r\n  MDBModal,\r\n  MDBModalBody,\r\n  MDBModalHeader,\r\n  MDBModalFooter,\r\n  MDBIcon,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCol\r\n} from \"mdbreact\";\r\n\r\nimport Event from \"./Event\";\r\nimport Notification from \"./Notification\";\r\nimport WeatherForecast from \"./WeatherForecast\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    notification: \"\",\r\n    modal: false,\r\n    events: [\r\n      {\r\n        id: 1,\r\n        time: \"10:00\",\r\n        title: \"Breakfast with Simon\",\r\n        location: \"Discuss 03 targets\"\r\n      },\r\n      {\r\n        id: 2,\r\n        time: \"10:30\",\r\n        title: \"Daily Standup Meeting (recurring)\",\r\n        location: \"Warsaw Spire Office\"\r\n      },\r\n      { id: 3, time: \"11:00\", title: \"Call with HRs\" },\r\n      {\r\n        id: 4,\r\n        time: \"12:00\",\r\n        title: \"Lunch with Timmoty\",\r\n        location: \"Canteen\",\r\n        description:\r\n          \"Project evalutation ile declaring a variable and using an if statement is a fine way to conditionally render a component, sometimes you might want to use a\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"online\", () => {\r\n      this.setState({ notification: \"online\" });\r\n    });\r\n\r\n    window.addEventListener(\"offline\", () => {\r\n      this.setState({ notification: \"offline\" });\r\n    });\r\n  }\r\n\r\n  addEvent = () => {\r\n    let newEvent = [...this.state.events];\r\n    newEvent.push({\r\n      id: newEvent.length ? newEvent[newEvent.length - 1].id + 1 : 1,\r\n      time: this.state.time,\r\n      title: this.state.title,\r\n      location: this.state.location,\r\n      description: this.state.description\r\n    });\r\n    this.setState({\r\n      events: newEvent\r\n    });\r\n    this.setState({\r\n      time: \"\",\r\n      title: \"\",\r\n      location: \"\",\r\n      description: \"\"\r\n    });\r\n  };\r\n\r\n  handleInputChange = inputName => value => {\r\n    const nextValue = value;\r\n    this.setState({\r\n      [inputName]: nextValue\r\n    });\r\n  };\r\n\r\n  handleDelete = eventId => {\r\n    const events = this.state.events.filter(e => e.id !== eventId);\r\n    this.setState({\r\n      events\r\n    });\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      modal: !this.state.modal\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { events, modal, notification } = this.state;\r\n    return (\r\n      <>\r\n        <MDBContainer>\r\n          <Notification notification={notification} />\r\n          <MDBRow>\r\n            <MDBCol md=\"9\" className=\"mb-r\">\r\n              <h2 className=\"text-uppercase my-3\">Today:</h2>\r\n              <div id=\"events\">\r\n                {this.state.events.map(event => (\r\n                  <Event\r\n                    key={event.id}\r\n                    id={event.id}\r\n                    time={event.time}\r\n                    title={event.title}\r\n                    location={event.location}\r\n                    description={event.description}\r\n                    onDelete={this.handleDelete}\r\n                  />\r\n                ))}\r\n              </div>\r\n              <MDBRow className=\"mb-4\">\r\n                <MDBCol xl=\"3\" md=\"6\" className=\"mx-auto text-center\">\r\n                  <MDBBtn color=\"info\" rounded onClick={this.toggleModal}>\r\n                    Add Event\r\n                  </MDBBtn>\r\n                </MDBCol>\r\n              </MDBRow>\r\n            </MDBCol>\r\n            <WeatherForecast length={events.length} />\r\n          </MDBRow>\r\n        </MDBContainer>\r\n        {/* creating the modal */}\r\n        <MDBModal isOpen={this.state.modal} toggle={this.toggleModal}>\r\n          <MDBModalHeader\r\n            className=\"text-center\"\r\n            titleClass=\"w-100 font-weight-bold\"\r\n            toggle={this.toggleModal}\r\n          >\r\n            Add new event\r\n          </MDBModalHeader>\r\n          <MDBModalBody>\r\n            <form className=\"mx-3 grey-text\">\r\n              <MDBInput\r\n                name=\"time\"\r\n                label=\"Time\"\r\n                icon=\"clock\"\r\n                hint=\"12:30\"\r\n                group\r\n                type=\"text\"\r\n                getValue={this.handleInputChange(\"time\")}\r\n              />\r\n              <MDBInput\r\n                name=\"title\"\r\n                label=\"Title\"\r\n                icon=\"edit\"\r\n                hint=\"Briefing\"\r\n                group\r\n                type=\"text\"\r\n                getValue={this.handleInputChange(\"title\")}\r\n              />\r\n              <MDBInput\r\n                name=\"location\"\r\n                label=\"Location (optional)\"\r\n                icon=\"map\"\r\n                group\r\n                type=\"text\"\r\n                getValue={this.handleInputChange(\"location\")}\r\n              />\r\n              <MDBInput\r\n                name=\"description\"\r\n                label=\"Description (optional)\"\r\n                icon=\"sticky-note\"\r\n                group\r\n                type=\"textarea\"\r\n                getValue={this.handleInputChange(\"description\")}\r\n              />\r\n            </form>\r\n          </MDBModalBody>\r\n          <MDBModalFooter className=\"justify-content-center\">\r\n            <MDBBtn\r\n              color=\"info\"\r\n              onClick={() => {\r\n                this.toggleModal();\r\n                this.addEvent();\r\n              }}\r\n            >\r\n              Add\r\n            </MDBBtn>\r\n          </MDBModalFooter>\r\n        </MDBModal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}